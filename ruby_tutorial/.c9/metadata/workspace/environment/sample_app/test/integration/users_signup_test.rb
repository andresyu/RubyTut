{"filter":false,"title":"users_signup_test.rb","tooltip":"/environment/sample_app/test/integration/users_signup_test.rb","undoManager":{"mark":18,"position":18,"stack":[[{"start":{"row":25,"column":4},"end":{"row":25,"column":26},"action":"remove","lines":["assert_not flash.alert"],"id":14},{"start":{"row":25,"column":4},"end":{"row":25,"column":24},"action":"insert","lines":["assert is_logged_in?"]}],[{"start":{"row":24,"column":4},"end":{"row":24,"column":5},"action":"insert","lines":["#"],"id":15}],[{"start":{"row":25,"column":4},"end":{"row":25,"column":5},"action":"insert","lines":["#"],"id":16}],[{"start":{"row":2,"column":55},"end":{"row":3,"column":0},"action":"insert","lines":["",""],"id":17},{"start":{"row":3,"column":0},"end":{"row":3,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":3,"column":0},"end":{"row":3,"column":4},"action":"remove","lines":["    "],"id":18}],[{"start":{"row":3,"column":0},"end":{"row":3,"column":1},"action":"insert","lines":[" "],"id":19}],[{"start":{"row":3,"column":1},"end":{"row":3,"column":2},"action":"insert","lines":[" "],"id":20}],[{"start":{"row":3,"column":2},"end":{"row":6,"column":0},"action":"insert","lines":[" def setup","    ActionMailer::Base.deliveries.clear","  end",""],"id":21}],[{"start":{"row":3,"column":2},"end":{"row":3,"column":3},"action":"remove","lines":[" "],"id":22}],[{"start":{"row":2,"column":55},"end":{"row":3,"column":0},"action":"insert","lines":["",""],"id":23},{"start":{"row":3,"column":0},"end":{"row":3,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":17,"column":31},"end":{"row":18,"column":0},"action":"insert","lines":["",""],"id":25},{"start":{"row":18,"column":0},"end":{"row":18,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":18,"column":4},"end":{"row":21,"column":0},"action":"insert","lines":["assert_template 'users/new'","    assert_select 'div#error_explanation'","    assert_select 'div.field_with_errors'",""],"id":26}],[{"start":{"row":18,"column":0},"end":{"row":19,"column":0},"action":"remove","lines":["    assert_template 'users/new'",""],"id":27}],[{"start":{"row":23,"column":3},"end":{"row":36,"column":3},"action":"remove","lines":["test \"valid signup information\" do","    get signup_path","    assert_difference 'User.count', 1 do","      post users_path, params: { user: { name:  \"Example User\",","                                         email: \"user@example.com\",","                                         password:              \"password\",","                                         password_confirmation: \"password\" } }","    end","    follow_redirect!","    #assert_template 'users/show'","    #assert is_logged_in?","  end","","end"],"id":28},{"start":{"row":23,"column":3},"end":{"row":50,"column":3},"action":"insert","lines":[" test \"valid signup information with account activation\" do","    get signup_path","    assert_difference 'User.count', 1 do","      post users_path, params: { user: { name:  \"Example User\",","                                         email: \"user@example.com\",","                                         password:              \"password\",","                                         password_confirmation: \"password\" } }","    end","    assert_equal 1, ActionMailer::Base.deliveries.size","    user = assigns(:user)","    assert_not user.activated?","    # Try to log in before activation.","    log_in_as(user)","    assert_not is_logged_in?","    # Invalid activation token","    get edit_account_activation_path(\"invalid token\", email: user.email)","    assert_not is_logged_in?","    # Valid token, wrong email","    get edit_account_activation_path(user.activation_token, email: 'wrong')","    assert_not is_logged_in?","    # Valid activation token","    get edit_account_activation_path(user.activation_token, email: user.email)","    assert user.reload.activated?","    follow_redirect!","    assert_template 'users/show'","    assert is_logged_in?","  end","end"]}],[{"start":{"row":23,"column":0},"end":{"row":23,"column":4},"action":"remove","lines":["    "],"id":32}],[{"start":{"row":23,"column":0},"end":{"row":23,"column":1},"action":"insert","lines":[" "],"id":33}],[{"start":{"row":23,"column":1},"end":{"row":23,"column":2},"action":"insert","lines":[" "],"id":34}],[{"start":{"row":3,"column":0},"end":{"row":8,"column":0},"action":"remove","lines":["    ","  def setup","    ActionMailer::Base.deliveries.clear","  end","",""],"id":35,"ignore":true},{"start":{"row":13,"column":2},"end":{"row":16,"column":2},"action":"remove","lines":["  assert_select 'div#error_explanation'","    assert_select 'div.field_with_errors'","","  "]},{"start":{"row":15,"column":0},"end":{"row":15,"column":1},"action":"insert","lines":[" "]},{"start":{"row":15,"column":33},"end":{"row":15,"column":57},"action":"remove","lines":[" with account activation"]},{"start":{"row":23,"column":0},"end":{"row":38,"column":0},"action":"remove","lines":["    assert_equal 1, ActionMailer::Base.deliveries.size","    user = assigns(:user)","    assert_not user.activated?","    # Try to log in before activation.","    log_in_as(user)","    assert_not is_logged_in?","    # Invalid activation token","    get edit_account_activation_path(\"invalid token\", email: user.email)","    assert_not is_logged_in?","    # Valid token, wrong email","    get edit_account_activation_path(user.activation_token, email: 'wrong')","    assert_not is_logged_in?","    # Valid activation token","    get edit_account_activation_path(user.activation_token, email: user.email)","    assert user.reload.activated?",""]},{"start":{"row":26,"column":5},"end":{"row":27,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":3,"column":0},"end":{"row":8,"column":0},"action":"insert","lines":["    ","  def setup","    ActionMailer::Base.deliveries.clear","  end","",""],"id":36,"ignore":true},{"start":{"row":18,"column":2},"end":{"row":21,"column":2},"action":"insert","lines":["  assert_select 'div#error_explanation'","    assert_select 'div.field_with_errors'","","  "]},{"start":{"row":23,"column":0},"end":{"row":23,"column":1},"action":"remove","lines":[" "]},{"start":{"row":23,"column":32},"end":{"row":23,"column":56},"action":"insert","lines":[" with account activation"]},{"start":{"row":31,"column":0},"end":{"row":46,"column":0},"action":"insert","lines":["    assert_equal 1, ActionMailer::Base.deliveries.size","    user = assigns(:user)","    assert_not user.activated?","    # Try to log in before activation.","    log_in_as(user)","    assert_not is_logged_in?","    # Invalid activation token","    get edit_account_activation_path(\"invalid token\", email: user.email)","    assert_not is_logged_in?","    # Valid token, wrong email","    get edit_account_activation_path(user.activation_token, email: 'wrong')","    assert_not is_logged_in?","    # Valid activation token","    get edit_account_activation_path(user.activation_token, email: user.email)","    assert user.reload.activated?",""]},{"start":{"row":49,"column":5},"end":{"row":50,"column":0},"action":"remove","lines":["",""]}]]},"ace":{"folds":[],"scrolltop":338,"scrollleft":0,"selection":{"start":{"row":25,"column":4},"end":{"row":25,"column":4},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":21,"state":"start","mode":"ace/mode/ruby"}},"timestamp":1538428349056,"hash":"e516ee02a3b30c0a15e3548810248886d21f34b4"}